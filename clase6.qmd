---
title: "Clase 6 - APIs"
format: html
editor: visual
---

## Objetivos de Aprendizaje

1.  Definir y explicar como funcionan las API.

2.  Identificar al menos 3 formatos en los que las API devuelven su informacion.

3.  Ejercitar el acceso y consumo de informacion de APIs de diferentes plataformas.

## Slides

<iframe src="https://docs.google.com/presentation/d/1FgAzscQFyHl2Awexcn5sJsevy6lMUDiCObGYiol2Fbs/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="760" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true">

</iframe>

## Live Coding

### Accediendo a la API de Twitter

::: callout-caution
## Mastodon en vez de X (ex Twitter)

Esta clase fue realizada previo a la venta de Twitter y su rebranding a X. Me retire de esa red social debido a lo que esta ocurriendo. X es un lugar hostil. **Recomiendo NO usarla para dar clases de ningun tipo.**

Existe un paquete llamado **rtoot** que permite acceder a Mastodon y se podria realizar una clase similar. Dejo el ejemplo con rtweet porque las ideas son aplicables a cualquier red social.
:::

Este live coding utiliza el paquete `rtweet` y como ejemplo la cuenta de la docente. Se puede seleccionar cualquier cuenta de esa red social para poder realizar el ejercicio.

#### Cargamos los paquetes que vamos a necesitar.

``` r
library(tidyverse)
library(tidytext)
library(rtweet)
```

### Autenticandonos

``` r

auth_setup_default()
```

### Obteniendo info de un usuario

``` r

seguidores <- get_followers("yabellini")

data_usuario <- lookup_users(c(seguidores$from_id))

amigues <- get_friends("yabellini")
```

### Obtener los ultimos tweets

``` r

tweets <- get_timeline("yabellini", n = 500)

tweets_favoritos <- get_favorites("yabellini", n = 20)
```

### Uniendo los conceptos APIs y Textminig

``` r

solo_texto <- tweets %>% 
  select(text) %>% 
  unnest_tokens(palabras, text)

stopwords_es <- tibble(palabras = tm::stopwords(kind = "es"))

stopwords_en <- tibble(palabras = tm::stopwords(kind = "en"))


st_sinsw <- solo_texto %>% 
  anti_join(stopwords_es) %>% 
  anti_join(stopwords_en)

resumen <- st_sinsw %>% 
  count(palabras) %>% 
  filter(palabras !%in% c("rt", "https")
```

## Ejercicios

### Ejercicio 1. Obteniendo API Keys

**Duración:** \~20 minutos

Miren el siguiente video sobre API y contesten en grupo las preguntas:

**Video 1:** <https://www.youtube.com/watch?v=YzAm7hGCxZY>  

**1) Pregunta:** ¿Los pasos para obtener el acceso a la API son complejos?

**2) Pregunta:** Durante las materias de esta primera parte de la diplomatura ¿habían usado APIs?, ¿cuáles?, ¿habían sacado API Keys? ¿Cuáles?

**3) Pregunta:** googlen como sacar una api key de facebook y seleccionen de los resultados algún video, ¿qué pasa si cambian de aplicación, por ejemplo: spotify o instagram o alguna otra aplicación que ustedes quieran ver.  ¿Es difícil conseguir instrucciones?

### Ejercicio 2. Accediendo a la API de Twitter desde R

Completa los espacios en blanco para poder resolver los siguientes ejercicios en R utilizando la API de Twitter.

``` r

library(_________) #para poder usar el pipe y filtrar y graficar
library(_________) #para poder hacer text mining
library(_________) #para poder usar twitter
```

#### Autenticarse

Utilizar el siguiente código para autenticarte en twitter y poder utilizar la API.  Necesitas tener una cuenta en twitter.

``` r 
auth_setup_default()

```


#### Recuperar los datos

Obtener los seguidores de la cuenta y a que usuarios la cuenta sigue.

``` r

seguidores <- get________("____________")

amigues <- get________("____________")

```

#### Recuperar tweets

Recuperar los últimos 1000 tweets

``` r

tmls <- get___________("___________", n = _____________)

```

Recuperar los últimos 1000 favoritos

``` r

favs <- get_________(__________, ____________)

```

#### Hacer text minig sobre los tweets


Primero obtener solo el texto de los tweet del timeline

``` r

texto_tweets <- tmls %>% 
  select(full_text) %>% 
  ______________(palabras, full_text)

```

Ahora hacer lo mismo pero con los favoritos

``` r

texto_favoritos <- ________ %>% 
  __________(____________) %>% 
  ______________(palabras, __________)

```

Tenemos que remover las stopwords. Revisar bien que idiomas trabaja la cuenta para
filtrar todas las stopwords necesarias

``` r

stopwords <- tibble(palabras = tm::stopwords(kind = "es"))
stopwords_en <- tibble(palabras = tm::stopwords(kind = "en"))

texto_sin_stopwords <- texto_tweets %>%
  anti_join(___________) %>% 
  anti_join(___________)

```

Ahora hay que hacer lo mismo para los favoritos

``` r

favoritos_sin_stopwords <- ____________ %>%
  ____________(___________) %>% 
  ____________(___________)

```

Ahora calculamos las frecuencias

``` r 
resumen_tw <- texto_sin_stopwords %>%
  _________(palabras) %>%
  summarise(cantidad = n()) %>%
  _________(desc(cantidad))

```

Y hacemos el mismo cálculo para favoritos

``` r 
resumen_favoritos <- _____________ %>%
  _________(palabras) %>%
  _________(cantidad = n()) %>%
  _________(________(cantidad))

```

#### Gráficos

Hacemos un gráfico de barras para el texto de los tweets

``` r

# Aqui tu codigo para realizar el gráfico de barras

```

Hacemos una nube de palabras para el texto de los favoritos

``` r

# Aqui tu codigo para hacer la nnube de palabras

```



